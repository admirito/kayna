#!/bin/bash
set -e

# this will keep the status code of <command> when we add
# "pipeline tee ..." at its end. the alternative is
# <command> | tee out.txt ; test ${PIPESTATUS[0]} -eq 0
set -o pipefail

[ -f "/etc/kayna/kayna.conf" ] && . /etc/kayna/kayna.conf || true

curl() # fix curl in Ubuntu xenial
{
    /usr/bin/curl "$@" || [ "$?" = "56" ]
}

git_head_comment()
{
    git log --format=%B -n 1 | cat
}

git_head_abbreviated_hash()
{
    [ -n "$CI_BUILD_REF" ] && echo "$CI_BUILD_REF" | awk  '{ print substr($0, 1, 7); }' || git log --format=%h -n 1 | cat
}

project_name()
{
    git remote -v | head -n1 | awk '{print $2}' | sed -e 's|.*:\(.*/\)\?||' -e 's|\.git$||'
}

project_unique_id()
{
    [ -n "$CI_PROJECT_ID" ] && echo "$CI_PROJECT_ID" || git remote -v | head -n 1 | awk '{ print $2 }'
}

debian_version()
{
    dpkg-parsechangelog --show-field Version
}

debian_source_name()
{
    dpkg-parsechangelog --show-field Source
}

debian_distribution()
{
    dpkg-parsechangelog --show-field Distribution
}

debian_changes_files()
{
    local changes_file="${1}"
    sed -n '/^Files:\s*$/,/^\s*$/p' "$changes_file" | sed -e '1d' | awk '{ print $5 }'
}

docker_container_id()
{
    awk -F'[:/]' '(($4 == "docker") && (lastId != $NF)) { lastId = $NF; print $NF; }' /proc/self/cgroup
}

docker_tag_restriction()
{
    # https://docs.docker.com/engine/reference/commandline/tag/#parent-command
    # https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version
    sed -e 's/:/COLON/g' -e 's/+/PLUS/g' -e 's/~/TILDE/g' -e 's/[^A-Za-z0-9._-]//g' | head -c128
}

docker_fullname_restriction()
{
    fullname=$(cat)
    name=$(echo $fullname | sed 's/:.*/:/g')
    version=$(echo $fullname | sed 's/[^:]*:\?//' | docker_tag_restriction)
    echo $name$version
}

remove_color()
{
    # Adapted from:
    # http://www.commandlinefu.com/commands/view/3584/remove-color-codes-special-characters-with-sed
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" "$@"
}

url_encode()
{
    # Adapted from:
    # http://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
	c=${string:$pos:1}
	case "$c" in
	    [-_.~a-zA-Z0-9] ) o="${c}" ;;
	    * )               printf -v o '%%%02x' "'$c"
	esac
	encoded+="${o}"
    done
    echo "${encoded}"
}

if [ -z "$SUITE" ] && [ -n "$ELDORADO_SUITE_REGEX" ] &&
       debian_distribution | grep -qP "$ELDORADO_SUITE_REGEX"; then
    SUITE=$(debian_distribution)
elif [ -n "$ELDORADO_DEFAULT_SUITE" ]; then
    if [ -z "$UPLOAD_SUITE" ] &&
       ([ -z "$ELDORADO_SUITE_REGEX" ] ||
        echo "$SUITE" | grep -qP "$ELDORADO_SUITE_REGEX"); then
	UPLOAD_SUITE="$SUITE"
    fi
    SUITE="$ELDORADO_DEFAULT_SUITE"
fi

if [ -z "$USED_COMPONENT" ] && [ -n "$ELDORADO_DEFAULT_USED_COMPONENT" ]; then
    COMPONENT="$ELDORADO_DEFAULT_USED_COMPONENT"
fi
if [ -z "$UPLOAD_COMPONENT" ] && [ -n "$ELDORADO_DEFAULT_UPLOAD_COMPONENT" ]; then
    COMPONENT="$ELDORADO_DEFAULT_UPLOAD_COMPONENT"
fi

case "$1" in
    build-dep)
        printf "You have to follow the Golde Eaglen to satisfy your build dependencies.\n\n" | tee -a KAYNA-LOG

	if [ -n "$SUITE" ]; then
	    printf "Kayna will enable eldorado (suite = $SUITE, component = ${USED_COMPONENT-testing}) debian repos before installing required packages.\n\n" | tee -a KAYNA-LOG
	    printf "deb http://eldorado/ $SUITE ${USED_COMPONENT-testing}\n" > /etc/apt/sources.list.d/eldorado.list
	fi

	(apt update || true) 2> >(tee -a KAYNA-LOG)
        if ! DEBIAN_FRONTEND=noninteractive mk-build-deps -irt "apt --no-install-recommends -y --allow-unauthenticated" debian/control | tee -a KAYNA-LOG; then
            printf "\n==========\nOops\x21 Something bad happened\x21\nTo find El-Dorado you shall pass Catan.\nYou have to fight the barbarians to save the island.\nFollow the golden eagle to fix the problem and reach El Hombre Dorado.\nOr simpler, ask the right one.\nWho has created the whole Catan, El-Dorado and even Kayna herself?\nDidn't you still believe?\nIf yes, just send your prayers to mrazavi64 at gmail dot com.\n" | tee -a KAYNA-LOG
            exit 1
        fi
    ;;

    docker-commit)
	IMAGE_NAME="$2"
	printf "Kayna uses her agent to commit the docker container $(docker_container_id) to $IMAGE_NAME\n" | tee -a KAYNA-LOG
	curl -w\\n -q -k "https://172.17.0.1:4443/eldorado/docker/commit?container=$(docker_container_id)&image=$IMAGE_NAME" | tee -a KAYNA-LOG
    ;;

    docker-rmi)
	IMAGE_NAME="$2"
	printf "Kayna uses her agent to remove the docker image $IMAGE_NAME\n" | tee -a KAYNA-LOG
	curl -w\\n -q -k "https://172.17.0.1:4443/eldorado/docker/rmi?image=$IMAGE_NAME" | tee -a KAYNA-LOG
    ;;

    clean)
        printf "Can't you clean up after yourself and don't ask a princess?\n" | tee -a KAYNA-LOG
        debclean | tee -a KAYNA-LOG
    ;;

    build)
        printf "Princess Kayna will command to build your package.\n" | tee -a KAYNA-LOG
        DEB_BUILD_OPTIONS="nocheck" dpkg-buildpackage -uc -us -nc --target build-indep --target build-arch --target build | tee -a KAYNA-LOG
    ;;

    test)
        if [ -n "$(find debian/ -maxdepth 1 -name '*.debhelper.log' -print -quit)" ] || [ -e debian/debhelper-build-stamp ]; then
            if [ -e debian/debhelper-build-stamp ] || grep -q "^\s*dh_auto_build" debian/*.debhelper.log; then
                dpkg-buildpackage -uc -us -nc --target build-indep --target build-arch --target build | tee -a >(grep "^\s*dh_auto_test" -A100000 > KAYNA-LOG)
            else
                printf "Error: Kayna couldn't find dh_auto_build in the debian/*.debhelper.log file.\nDid you build the package before calling test?\n" | tee -a KAYNA-LOG
                exit 1
            fi
        else
            printf "Error: Kayna couldn't find the debian/*.debhelper.log file (for debian compat 9) or debian/debhelper-build-stamp (for debian compat 10).\nDid you build the package before calling test?\nAre you using debhelper at all?\n" | tee -a KAYNA-LOG
            exit 1
        fi
    ;;
   
    debuild)
	if [ "$INCREMENTAL_VERSION" = "1" ]; then
	    echo "Finding a new version for $(project_name) (id=$(project_unique_id)) $(debian_version) ..." | tee -a KAYNA-LOG
	    ID=$(url_encode $(project_unique_id))
	    PREFIX=$(url_encode $(debian_version))
	    if ! POSTFIX=$(curl -q -f -H "Accept: text/plain" -k "https://172.17.0.1:4443/eldorado/version-db/increment?id=$ID&prefix=$PREFIX") || ! echo "$POSTFIX" | grep -q "^[[:digit:]]\+$"; then
		echo "Kayna couldn't communicate with her agent on the host server to find a " | tee -a KAYNA-LOG
		echo "new version. She has to generate it on her own!" | tee -a KAYNA-LOG
		POSTFIX="$(date +%Y%m%d%H%M%S)"
	    fi

	    POSTFIX="$POSTFIX.$(git_head_abbreviated_hash)"

	    NEW_VERSION="$(debian_version)~$POSTFIX"
	    sed -i "1 s/\(\S\+\s\+\)\S\+/\1($NEW_VERSION)/" debian/changelog
	    echo "debian changelog version modified to version $NEW_VERSION" | tee -a KAYNA-LOG
	else
	    echo "Kayna will not modify the debian/changelog version number." | tee -a KAYNA-LOG
	fi
	
	if git_head_comment | grep -q "#notest\|#nocheck"; then
            DEB_BUILD_OPTIONS="nocheck" dpkg-buildpackage -b -uc -us -nc | tee -a KAYNA-LOG
	else
            dpkg-buildpackage -b -uc -us -nc | tee -a KAYNA-LOG
	fi

	SOURCE_PREFIX="$(debian_source_name)_$(debian_version)"

	# According to the dpkg-buildpackage man page, -nc implies -b.
	# Also, creating a source package with -nc may add extra stuff
	# to the source package
	echo "Kayna will now create a source package..." | tee -a KAYNA-LOG
	cp debian/files ../KAYNA-debian-files.backup
	dpkg-buildpackage -S -uc -us -tc | tee -a KAYNA-LOG
	rm -f ../$SOURCE_PREFIX*source.changes

	echo "Kayna will now update the .changes files..." | tee -a KAYNA-LOG
	mv ../KAYNA-debian-files.backup debian/files
	dpkg-genchanges > ../$SOURCE_PREFIX*.changes
	rm -f debian/files

	mkdir -p ELDORADO
	debian_version > ELDORADO/.DEB_VERSION
	for file in $(debian_changes_files ../$SOURCE_PREFIX*.changes); do
	    mv "../$file" ELDORADO/
	done
	find .. -maxdepth 1 -type f -a -name "$SOURCE_PREFIX*" -exec mv {} ELDORADO \;

	if ! git_head_comment | grep -q "#fast"; then
	    if test -n "$(find ELDORADO -maxdepth 1 -name '*.changes' -print -quit)"; then
		echo "Kayna will now analyse the output deb file(s) with lintian" | tee -a KAYNA-LOG
		if lintian --allow-root --color=always --profile=kayna -iI ELDORADO/*.changes | tee -a KAYNA-LOG | tee LINTIAN-errors; then
		    if grep -q "^W:" LINTIAN-errors; then
			remove_color LINTIAN-errors > LINTIAN-warnings
			printf "\nNo errors, although Kayna thinks you have to work on the mentioned warnings.\n" | tee -a KAYNA-LOG | tee -a LINTIAN-warnings
		    elif grep -q "\S" LINTIAN-errors; then
			remove_color LINTIAN-errors > LINTIAN-is-almost-clean
			printf "\nWell done. No errors and no warnings.\nJust a few notes to keep your package even better!\n" | tee -a KAYNA-LOG | tee -a LINTIAN-is-almost-clean
		    else
			echo "Hooray! No lintian errors, warnings, or notes." | tee -a KAYNA-LOG | tee LINTIAN-is-clean
		    fi
		    rm -f LINTIAN-errors
		else
		    remove_color -i LINTIAN-errors
		    if git_head_comment | grep -q "#lintian"; then
			echo "#lintian is set, but you don't have a clean lintian log." | tee -a KAYNA-LOG
			echo "You have to work on your lintan errors." | tee -a KAYNA-LOG
			exit 1
		    else
			echo "Kayna is worried about your lintian errors." | tee -a KAYNA-LOG
			echo "Is it so hard to resolve it?" | tee -a KAYNA-LOG
			echo "I let you escape this time just because you didn't mention #lintian" | tee -a KAYNA-LOG
			echo "in your git comment, although it is yet another inconsideration!" | tee -a KAYNA-LOG
		    fi
		fi
		remove_color -i KAYNA-LOG
	    else
		echo "Oops! Where is the .changes file?!" | tee -a KAYNA-LOG
	    fi
	else
	    echo "It seems that you are in a hurry." | tee -a KAYNA-LOG
	    echo "Kayna lets you skip running the lintian for now." | tee -a KAYNA-LOG
	    echo "Please be more cautious next time." | tee -a KAYNA-LOG
	fi
    ;;

    upload)
	if debian_distribution | grep -q "^UNRELEASED$\|^.\+-UNRELEASED$"; then
	    echo "Skip uploading UNRELEASED distribution." | tee -a KAYNA-LOG
	    [ "$2" = "-f" ] && echo "Cannot upload UNRELEASED distribution." | tee -a KAYNA-LOG  && exit 1
	else
	    if [ -n "$STRICT_DEBIAN_DIST_NAME" ] &&
	       [ "$(debian_distribution)" != "$STRICT_DEBIAN_DIST_NAME" ]; then
		echo "branch name is $STRICT_DEBIAN_DIST_NAME but debian distribution is $(debian_distribution). Kayna will abort uploading of the package to eldorado." | tee -a KAYNA-LOG
		exit 1
	    fi

            [ -z "$UPLOAD_SUITE" ] && UPLOAD_SUITE="$SUITE"

	    for changes_file in ELDORADO/*.changes; do
		if [ -n "$UPLOAD_SUITE" ]; then
		    dput -u "eldorado-with-args:$UPLOAD_SUITE:$UPLOAD_COMPONENT:$(basename $changes_file)" "$changes_file"  | tee -a KAYNA-LOG
		    echo $UPLOAD_SUITE > ELDORADO/.UPLOAD_SUITE
		    echo $UPLOAD_COMPONENT > ELDORADO/.UPLOAD_COMPONENT
		else
		    dput -u "eldorado-with-changes:$(basename $changes_file)" "$changes_file"  | tee -a KAYNA-LOG
		fi
	    done
	fi
    ;;

    docker-build)
	DOCKER_USER=${DOCKER_USER:-kayna}
	DOCKER_REGISTRY=${DOCKER_REGISTRY:-dakar}

	echo "login to '$DOCKER_REGISTRY' docker registry with the user '$DOCKER_USER' and \$KAYNA_DAKAR_TOKEN value as the password." | tee -a KAYNA-LOG
        docker login -u $DOCKER_USER -p $KAYNA_DAKAR_TOKEN $DOCKER_REGISTRY | tee -a KAYNA-LOG || exit 1

	DOCKER_DIR=${DOCKER_DIR:-docker}
	#DOCKER_FILE=${DOCKER_FILE:-Dockerfile}

	[ -f ELDORADO/.DEB_VERSION ] && DOCKER_VERSION=${DOCKER_VERSION:-$(cat ELDORADO/.DEB_VERSION)}
	[ -f ELDORADO/.UPLOAD_SUITE ] && DOCKER_SUITE=${DOCKER_SUITE:-$(cat ELDORADO/.UPLOAD_SUITE)}
	[ -f ELDORADO/.UPLOAD_COMPONENT ] && DOCKER_COMPONENT=${DOCKER_COMPONENT:-$(cat ELDORADO/.UPLOAD_COMPONENT)}

	# Note: DOCKER_NAME variable is used internally by gitlab
	DOCKER_BASE_NAME="${DOCKER_BASE_NAME:-$CI_PROJECT_NAME}"
	DOCKER_TAGS=${DOCKER_TAGS:-$DOCKER_BASE_NAME:$DOCKER_VERSION}
	[ -n "$DOCKER_EXTRA_TAGS" ] && DOCKER_TAGS="$DOCKER_TAGS $(for tag in $DOCKER_EXTRA_TAGS; do echo $DOCKER_BASE_NAME:$tag; done)"

	DOCKER_TAGS=$(for i in $DOCKER_TAGS; do echo -n $DOCKER_REGISTRY/$(echo $i | docker_fullname_restriction) ""; done)

	echo "run docker build on '${DOCKER_FILE:-Dockerfile}' from '$DOCKER_DIR' directory with version=$DOCKER_VERSION suite=$DOCKER_SUITE component=$DOCKER_COMPONENT arguments and $DOCKER_TAGS tags." | tee -a KAYNA-LOG
	docker build --build-arg=DISTRIBUTION="$DISTRIBUTION" --build-arg=version="$DOCKER_VERSION" --build-arg=suite="$DOCKER_SUITE" --build-arg=component="$DOCKER_COMPONENT" $DOCKER_BUILD_EXTRA_ARGS $(for i in $DOCKER_TAGS; do echo -t $i; done) ${DOCKER_FILE:+-f $DOCKER_FILE} "$DOCKER_DIR" | tee -a KAYNA-LOG || exit 1

	for tag in $DOCKER_TAGS; do
	    echo "pushing $tag ..." | tee -a KAYNA-LOG
	    docker push "$tag" | tee -a KAYNA-LOG
	done
    ;;

    deploy)
        echo "TODO: Kayna will deploy the debian packages." | tee -a KAYNA-LOG
    ;;

    diagnose)
	IMAGE_NAME="$2"

	echo "Kayna is copying project files to /builds-copy for diagnose." | tee -a KAYNA-LOG
	cp -a "$CI_PROJECT_DIR/.." "/builds-copy"

	printf "Kayna uses her agent to commit the docker container to $IMAGE_NAME\n" | tee -a KAYNA-LOG
	curl -w\\n -q -k "https://172.17.0.1:4443/eldorado/docker/commit?container=$(docker_container_id)&image=$IMAGE_NAME" | tee -a KAYNA-LOG

	#TODO: push the image to docker registry
    ;;

    *)
        echo "Invalid argument: $1" >&2
        exit 1
    ;;
esac

exit 0
