#!/usr/bin/env python
#
# Written by Mohammad Razavi <mrazavi64 at gmail dot com>
#

import sys
import os
import time
import re
import json
import shelve
import fcntl
import errno
import contextlib
import subprocess
import shutil
import optparse
import urlparse
import ssl
import BaseHTTPServer

class FileLock:
    def __init__(self, path):
        self.__fd = open(path, "w+")
        while True:
            try:
                fcntl.flock(self.__fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            except IOError as e:
                if e.errno != errno.EAGAIN:
                    raise e
                time.sleep(0.1)
            else:
                break

    def close(self):
        fcntl.flock(self.__fd, fcntl.LOCK_UN)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

def authentication(do_SPAM_func):
    def new_func(self):
        if self.api_key:
            match = re.match(r"/([^/]*)(/.*)", self.path)
            if not match or match.group(1) != self.api_key:
                self.send_response(403)
                self.send_header("Content-type", "application/json")
                self.end_headers()
                result = {"ok": 0, "error": "Invalid API key."}
                self.wfile.write(json.dumps(result))
                return

            path = match.group(2)

            url = urlparse.urlparse(path)
            self.path = url.path
            self.query = urlparse.parse_qs(url.query)

        do_SPAM_func(self)

    return new_func

class KaynaHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    api_key = ""
    docker_image_prefix = ""

    @authentication
    def do_GET(self):
        result = {}
        result_text = ""
        response_code = 200
        if self.path == "/docker/commit":
            container = self.query.get("container", [None])[0]
            image = self.query.get("image", [None])[0]
            if not container or not image:
                result["error"] = "You have to specify an image and a container"
                response_code = 400
            else:
                image = "%s%s" % (self.docker_image_prefix, image)
                try:
                    code = subprocess.call(["docker", "commit",
                                            container, image])
                except Exception as e:
                    result["error"] = str(e)
                    response_code = 500
                else:
                    response_code = 200 if code == 0 else 500
        elif self.path == "/docker/rmi":
            image = self.query.get("image", [None])[0]
            if not image:
                result["error"] = "You have to specify an image"
                response_code = 400
            else:
                image = "%s%s" % (self.docker_image_prefix, image)
                try:
                    code = subprocess.call(["docker", "rmi", image])
                except Exception as e:
                    result["error"] = str(e)
                    response_code = 500
                else:
                    response_code = 200 if code == 0 else 500
        elif self.path == "/version-db/increment":
            project_id = self.query.get("id", [None])[0]
            prefix = self.query.get("prefix", [""])[0]
            step = int(self.query.get("step", [1])[0])
            if not project_id:
                result["error"] = "You have to specify an id"
                response_code = 400
            else:
                result["project_id"] = project_id
                with FileLock("/var/lib/kayna/version-db.lock"):
                    with contextlib.closing(shelve.open( \
                        "/var/lib/kayna/version-db.shelve")) as db:
                        project_dict = db.setdefault(project_id, {})
                        project_dict.setdefault(prefix, 0)
                        project_dict[prefix] += step
                        db[project_id] = project_dict
                        result["counter"] = db[project_id][prefix]
                        result_text = "%d\n" % result["counter"]
        else:
            result["error"] = "Invalid Request: %s" % self.path
            response_code = 404

        text_output = self.headers.get("accept", "").startswith("text/")

        self.send_response(response_code)
        self.send_header("Content-type", "text/plain" if text_output else \
                         "application/json")
        self.end_headers()

        if text_output:
            self.wfile.write(result_text)
        else:
            self.wfile.write(json.dumps(result))

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-x", "--prefix",
                      dest = "prefix",
                      type = "string", default = "",
                      help = "Set docker image name prefix to STRING",
                      metavar = "STRING")
    parser.add_option("-k", "--key",
                      dest = "api_key",
                      type = "string", default = "",
                      help = "set API key to STRING_OR_FILE. If it starts "
                             "with a preceding / it should be file "
                             "containing the key",
                      metavar = "STRING_OR_FILE")
    parser.add_option("-b", "--bind-host",
                      dest = "bind_host",
                      type = "string", default = "",
                      help = "bind the listening socket to ADDRESS",
                      metavar = "ADDRESS")
    parser.add_option("-p", "--port",
                      dest = "port",
                      type = "int", default = 4443,
                      help = "listen to port NUMBER",
                      metavar = "NUMBER")
    parser.add_option("-c", "--certificate",
                      dest = "certificate",
                      type = "string", default = "kayna-host-agent.pem",
                      help = "read the private key/certificate from the "
                             "pem FILE",
                      metavar = "FILE")
    parser.add_option("-g", "--generate-certificate",
                      dest = "generate_certificate",
                      action = "store_true", default = False,
                      help = "Generate a self-signed certificate with openssl"
                             " and exit" ,
                      metavar = "FILE")
    parser.add_option("-G", "--generated-certificate-path",
                      dest = "generated_certificate_path",
                      type = "string", default = "kayna-host-agent.pem",
                      help = "Along with -g option, store the generated "
                             "certificate and sotre it in FILE",
                      metavar = "FILE")
    parser.add_option("-i", "--install",
                      dest = "install",
                      action = "store_true", default = False,
                      help = "Install the binary and a systemd init script "
                             "at system wide path and exit",
                      metavar = "FILE")

    options, args = parser.parse_args()

    if options.generate_certificate:
        status = os.system("openssl req -new -x509 -keyout {0} -out {0} "
                           "-days 365 -nodes"
                           .format(options.generated_certificate_path))
        exit(status)

    ask_default = lambda x, y: raw_input("%s [%s]: " % (x, y)) or y

    if options.install:
        if sys.argv[0] != "/usr/local/bin/kayna-host-agent":
            shutil.copy(sys.argv[0], "/usr/local/bin/kayna-host-agent")

        cert_path = ask_default("Enter certificate file path to copy",
                                "./kayna-host-agent.pem")
        try:
            os.makedirs("/var/lib/kayna")
        except OSError:
            pass
        shutil.copy(cert_path, "/var/lib/kayna/kayna-host-agent.pem")

        bind_address = ask_default("Enter bind host IP address", "172.17.0.1")
        port = ask_default("Enter listening port number", "4443")
        key = ask_default("Enter API key", "eldorado")
        prefix = ask_default("Enter docker image name prefix [If you have a "
            "private docker registry you can put that here too, e.g. "
            "private-registry.com/kayna-]", "kayna-")

        user = ask_default("Enter the user to run the daemon as", "mapp")
        group = ask_default("Enter the group to run the daemon as", "mapp")

        with open("/lib/systemd/system/kayna-host-agent.service", "w") \
             as fp:
            fp.write("[Unit]\nDescription=Kayna Host Agent\n" \
                     "After=docker.service\nRequires=docker.service\n\n")
            fp.write("[Service]\nExecStart=/usr/local/bin/kayna-host-agent "
                     "-b {bind_address} -p {port} -k {key} -x {prefix} "
                     "-c /var/lib/kayna/kayna-host-agent.pem\nUser={user}\n"
                     "Group={group}\n\n"
                     .format(bind_address = bind_address, port = port,
                             key = key, prefix = prefix, user = user,
                             group = group))
            fp.write("[Install]\nWantedBy=multi-user.target\n\n")

        subprocess.call("chown -R %s:%s /var/lib/kayna" % (user, group),
                        shell = True)

        status = subprocess.call(["systemctl", "enable", "kayna-host-agent"])
        subprocess.call(["systemctl", "start", "kayna-host-agent"])
        exit(status)

    api_key = options.api_key
    if api_key.startswith("/"):
        with open(api_key) as fp:
            api_key = fp.read(api_key)

    server_address = (options.bind_host, options.port)
    certfile = options.certificate

    KaynaHandler.api_key = api_key
    KaynaHandler.docker_image_prefix = options.prefix

    httpd = BaseHTTPServer.HTTPServer(server_address, KaynaHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket, certfile = certfile,
                                   server_side = True)
    print "Serving on %s : %s ..." % httpd.socket.getsockname()

    parser = optparse.OptionParser()

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        httpd.shutdown()
